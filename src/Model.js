/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import useTextures from "./textures";

export default function Model({ textureIndex }) {
  const group = useRef();
  const { nodes } = useGLTF("/modelDraco.gltf");
  const [
    colorMaps,
    normalMaps,
    roughnessMaps,
    emissiveMaps,
    metalicMaps
  ] = useTextures();

  const material = new THREE.MeshPhysicalMaterial({
    color: "white",
    map: !textureIndex ? null : colorMaps[textureIndex - 1],
    bumpMap: normalMaps[textureIndex - 1],
    bumpScale: 0.01,
    roughnessMap: roughnessMaps[textureIndex - 1],
    emissive: metalicMaps[textureIndex - 1] ? "white" : "black",
    emissiveMap: emissiveMaps[textureIndex - 1],
    emissiveIntensity: 3,
    metalnessMap: metalicMaps[textureIndex - 1],
    metalness: metalicMaps[textureIndex - 1] ? 1 : 0
  });

  useFrame((state, delta) => {
    const rotationY = THREE.MathUtils.lerp(
      group.current.rotation.y,
      textureIndex * 2 * Math.PI,
      0.05
    );
    group.current.rotation.y =
      rotationY + Math.cos(state.clock.elapsedTime) / 40;
    group.current.position.y = 0.15 - Math.sin(state.clock.elapsedTime) / 10;
  });

  return (
    <group ref={group} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.body.geometry}
        material={material}
      />
    </group>
  );
}

useGLTF.preload("/modelDraco.gltf");
